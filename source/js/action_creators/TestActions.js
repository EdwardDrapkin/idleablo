import ActionCreator from 'action_creators/ActionCreator.js';

export default class TestActions extends ActionCreator {
    notReal(dispatch, arg1) {

        /*

        This is all you have to do to define an action

        1. you write your class

        2. you make your methods accept a dispatch callback as arg0

        3. you dispatch with the callback

        4. in react components, you just need to call these methods
            via this.context.actions.notReal(arg1) and ignore the dispatcher
            as it's an autogenerated callback... it might be possible to make
            this easier but idk how

        5. gotta figure out stores soon

        the dispatch callback calls the global dispatcher to dispatch an event
        called TESTACTIONS_NOTREAL that's dynamically created and added to the
        dispatcher, the store Api is going to have to continue to hide those

        I want the stores to be able to do

        Store.observe(TestActions.notReal, this.onNotReal);

        but i'm not quite there yet...
        
         */
        console.log("Magic inheritence!" + arg1);

        dispatch("Hello world!");
    }
}